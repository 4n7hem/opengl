varying vec3 vN;  // Varying variable for the surface normal
varying vec3 v;   // Varying variable for the vertex position
varying vec4 color; // Varying variable for the vertex color

#define MAX_LIGHTS 1  // Maximum number of lights

void main (void) 
{
   vec3 N = normalize(vN); // Normal de superficie
   vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0); // Resultado
   
   for (int i=0; i<MAX_LIGHTS; i++)
   {
      vec3 L = normalize(gl_LightSource[i].position.xyz - v); // Direção da luz
      vec3 E = normalize(-v); // Direção da view
      vec3 R = normalize(-reflect(L, N)); // Direção de reflexão
      
      vec4 Iamb = gl_LightSource[i].ambient; // Contribuição de luz ambiente

      vec4 Idiff = gl_LightSource[i].diffuse * max(dot(N, L), 0.0); // Contribuição de luz difusa      

      vec4 Ispec = gl_LightSource[i].specular * pow(max(dot(R, E), 0.0), 0.3 * gl_FrontMaterial.shininess); // Contribuição de luz especular      
      
      finalColor += Iamb + Idiff + Ispec; // Soma tudo
   }
   
   gl_FragColor = color * finalColor; // Multiplique o fragmento pela cor final
}